Протокол AMQP — открытый стандарт передачи сообщений. Он позволяет подсистемам/независимым приложениям обмениваться 
сообщениями через AMQP-брокер, отвечающий за маршрутизацию, доставку сообщений, распределение нагрузки и так далее.

Основные концепции AMQP:
 - message (сообщение) — непосредственно передаваемые данные;
 - exchange (точка обмена) — сам механизм маршрутизации сообщений. Точка обмена получает сообщения и распределяет их по очередям (одно сообщение может идти в одну или несколько очередей), при этом сама она не хранит сообщения. В самом простом случае для маршрутизации сообщений используется ключ (routing key), равный названию очереди, в которую нужно отправить сообщения. Иными словами, routing key — это виртуальный адрес очереди.
 - queue (очередь) хранит сообщения до тех пор, пока какой-нибудь AMQP-клиент не заберёт их;
 - producer (издатель) — клиент, публикующий сообщения в exchange;
 - consumer (подписчик) — клиент, получающий сообщения из очередей;
 - connection (соединение) — служит для физического сетевого соединения между клиентом и брокером и объединения нескольких каналов;
 - сhannel (канал) — используется для логического соединения между клиентом и брокером.

Чтобы реализовать AMQP на Python, воспользуемся библиотекой pika. 

Основные методы, с которыми мы будем работать:
 - BlockingConnection — объявление соединения
 - channel — объявление канала 
 - queue_declare — объявление очереди
 - basic_publish — отправка сообщения
 - basic_consume — получение сообщения
 - callback — метод, вызываемый при получении сообщения


Установим RabbitMQ. Теперь, когда Docker уже есть в нашей системе, достаточно просто написать одну bash-команду в командной строке: 
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management

Команда запускает образ rabbitmq:3-management, где:
-p 5672:5672 — порт для доступа к очереди.
-p 15672:15672 — порт для доступа к пользовательскому интерфейсу RabbitMQ (с ним мы сейчас работать не будем).

Очередь запущена и работает. К ней можно обратиться по адресу localhost:5672.


Полезные команды для Docker и Docker-Compose
docker-compose up -d --build   - запускает
docker-compose down            - останавливает
docker ps                      - посмотреть запущенные контейнеры
docker logs <container_id>     - посмотреть логи работы контейнера
